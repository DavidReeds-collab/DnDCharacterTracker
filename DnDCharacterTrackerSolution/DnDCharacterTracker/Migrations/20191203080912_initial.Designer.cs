// <auto-generated />
using System;
using DnDCharacterTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DnDCharacterTracker.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191203080912_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DnDCharacterTracker.Models.AbilityScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("AbilityScores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Strenght"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dexterity"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Constitution"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Wisdom"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Intelligence"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Charisma"
                        });
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Charisma");

                    b.Property<int>("Constitution");

                    b.Property<int>("Dexterity");

                    b.Property<int>("FK_Race");

                    b.Property<int>("Intelligence");

                    b.Property<string>("Name");

                    b.Property<int>("Strenght");

                    b.Property<int>("Wisdom");

                    b.HasKey("Id");

                    b.HasIndex("FK_Race");

                    b.ToTable("Character");
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.CharacterAbilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_AbilityScore");

                    b.Property<int>("FK_Character");

                    b.HasKey("Id");

                    b.HasIndex("FK_AbilityScore");

                    b.HasIndex("FK_Character");

                    b.ToTable("CharacterAbilities");
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.CharacterClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_Character");

                    b.Property<int>("FK_Class");

                    b.Property<int>("Level");

                    b.HasKey("Id");

                    b.HasIndex("FK_Character");

                    b.HasIndex("FK_Class");

                    b.ToTable("CharacterClasses");
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.CharacterProficiency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_Character");

                    b.Property<int>("FK_Proficiency");

                    b.HasKey("Id");

                    b.HasIndex("FK_Character");

                    b.HasIndex("FK_Proficiency");

                    b.ToTable("CharacterProficiencies");
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.CharacterRaceFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_Character");

                    b.Property<int>("FK_RaceFeature");

                    b.HasKey("Id");

                    b.HasIndex("FK_Character");

                    b.HasIndex("FK_RaceFeature");

                    b.ToTable("CharacterRaceFeatures");
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.CharacterSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_Character");

                    b.Property<int>("FK_Skill");

                    b.HasKey("Id");

                    b.HasIndex("FK_Character");

                    b.HasIndex("FK_Skill");

                    b.ToTable("CharacterSkills");
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.Choice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllowedOptions");

                    b.Property<string>("Descriminator");

                    b.HasKey("Id");

                    b.ToTable("Choices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllowedOptions = 1,
                            Descriminator = "language"
                        });
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CharacterId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Not chosen yet"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fighter"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Paladin"
                        });
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.ClassAbilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_AbilityScore");

                    b.Property<int>("FK_Class");

                    b.HasKey("Id");

                    b.HasIndex("FK_AbilityScore");

                    b.HasIndex("FK_Class");

                    b.ToTable("ClassAbilities");
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.ClassFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_Class");

                    b.Property<int>("FK_Feature");

                    b.Property<int>("Level");

                    b.HasKey("Id");

                    b.HasIndex("FK_Class");

                    b.HasIndex("FK_Feature");

                    b.ToTable("ClassFeatures");
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllowedNumberOfChoices");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.FeatureChoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_Feature");

                    b.Property<int>("FK_Option");

                    b.HasKey("Id");

                    b.HasIndex("FK_Feature");

                    b.HasIndex("FK_Option");

                    b.ToTable("FeatureChoices");
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("FK_Choice");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("FK_Choice");

                    b.ToTable("Option");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FK_Choice = 1,
                            Name = "Infernal"
                        },
                        new
                        {
                            Id = 2,
                            FK_Choice = 1,
                            Name = "Celestial"
                        },
                        new
                        {
                            Id = 3,
                            FK_Choice = 1,
                            Name = "Dwarfish"
                        });
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.Proficiency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Proficiencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Abyssal"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Aquan"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Auran"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Celestial"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Common"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Deep Speech"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Draconic"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Druidic"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Dwarvish"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Elvish"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Giant"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Gnomish"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Goblin"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Gnoll"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Halfling"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Ignan"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Infernal"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Orc"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Primordial"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Sylvan"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Undercommon"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Artisan’s Tools"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Disguise Kit"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Forgery Kit"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Gaming Set"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Herbalism Kit"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Musical Instrument"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Poisoner’s Kit"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Simple Weapons"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Martial Weapons"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Light Armor"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Medium Armor"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Simple Weapons"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Heavy Armor"
                        });
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("Speed");

                    b.HasKey("Id");

                    b.ToTable("Races");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Not chosen yet",
                            Speed = 0
                        },
                        new
                        {
                            Id = 2,
                            Name = "Human",
                            Speed = 30
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dwarf",
                            Speed = 0
                        });
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.RaceAbilityScores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_AbilityScore");

                    b.Property<int>("FK_Race");

                    b.Property<int>("amount");

                    b.HasKey("Id");

                    b.HasIndex("FK_AbilityScore");

                    b.HasIndex("FK_Race");

                    b.ToTable("raceAbilityScores");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            FK_AbilityScore = 1,
                            FK_Race = 2,
                            amount = 1
                        },
                        new
                        {
                            Id = -2,
                            FK_AbilityScore = 2,
                            FK_Race = 2,
                            amount = 1
                        },
                        new
                        {
                            Id = -3,
                            FK_AbilityScore = 3,
                            FK_Race = 2,
                            amount = 1
                        },
                        new
                        {
                            Id = -4,
                            FK_AbilityScore = 4,
                            FK_Race = 2,
                            amount = 1
                        },
                        new
                        {
                            Id = -5,
                            FK_AbilityScore = 5,
                            FK_Race = 2,
                            amount = 1
                        },
                        new
                        {
                            Id = -6,
                            FK_AbilityScore = 6,
                            FK_Race = 2,
                            amount = 1
                        });
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.RaceFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("RaceFeatures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Your Ability Scores each increase by 1.",
                            Name = "Ability Score Increase"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Humans reach Adulthood in their late teens and live less than a century.",
                            Name = "Age"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Humans tend toward no particular Alignment. The best and the worst are found among them.",
                            Name = "Alignment"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Humans vary widely in height and build, from barely 5 feet to well over 6 feet tall. Regardless of your position in that range, your size is Medium.",
                            Name = "Size"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Your base walking speed is 30 feet.",
                            Name = "Speed"
                        },
                        new
                        {
                            Id = 6,
                            Description = "You can speak, read, and write Common and one extra language of your choice. Humans typically learn the Languages of other peoples they deal with, including obscure dialects. They are fond of sprinkling their Speech with words borrowed from other tongues: Orc curses, Elvish musical expressions, Dwarvish Military phrases, and so on.",
                            Name = "Languages"
                        });
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.RaceFeatureChoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_Choice");

                    b.Property<int>("FK_RaceFeature");

                    b.HasKey("Id");

                    b.HasIndex("FK_Choice");

                    b.HasIndex("FK_RaceFeature");

                    b.ToTable("RaceFeatureChoices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FK_Choice = 1,
                            FK_RaceFeature = 6
                        });
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.RaceRacefeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_Race");

                    b.Property<int>("FK_RaceFeature");

                    b.HasKey("Id");

                    b.HasIndex("FK_Race");

                    b.HasIndex("FK_RaceFeature");

                    b.ToTable("RaceRacefeatures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FK_Race = 2,
                            FK_RaceFeature = 1
                        },
                        new
                        {
                            Id = 2,
                            FK_Race = 2,
                            FK_RaceFeature = 2
                        },
                        new
                        {
                            Id = 3,
                            FK_Race = 2,
                            FK_RaceFeature = 3
                        },
                        new
                        {
                            Id = 4,
                            FK_Race = 2,
                            FK_RaceFeature = 4
                        },
                        new
                        {
                            Id = 5,
                            FK_Race = 2,
                            FK_RaceFeature = 5
                        },
                        new
                        {
                            Id = 6,
                            FK_Race = 2,
                            FK_RaceFeature = 6
                        });
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_AbilityScore");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("FK_AbilityScore");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FK_AbilityScore = 2,
                            Name = "Acrobatics"
                        },
                        new
                        {
                            Id = 2,
                            FK_AbilityScore = 4,
                            Name = "Animal handling"
                        },
                        new
                        {
                            Id = 3,
                            FK_AbilityScore = 5,
                            Name = "Arcana"
                        },
                        new
                        {
                            Id = 4,
                            FK_AbilityScore = 1,
                            Name = "Athletics"
                        },
                        new
                        {
                            Id = 5,
                            FK_AbilityScore = 6,
                            Name = "Deception"
                        },
                        new
                        {
                            Id = 6,
                            FK_AbilityScore = 5,
                            Name = "History"
                        },
                        new
                        {
                            Id = 7,
                            FK_AbilityScore = 4,
                            Name = "Insight"
                        },
                        new
                        {
                            Id = 8,
                            FK_AbilityScore = 6,
                            Name = "Intimidation"
                        },
                        new
                        {
                            Id = 9,
                            FK_AbilityScore = 4,
                            Name = "Medicine"
                        },
                        new
                        {
                            Id = 10,
                            FK_AbilityScore = 5,
                            Name = "Nature"
                        },
                        new
                        {
                            Id = 11,
                            FK_AbilityScore = 4,
                            Name = "Perception"
                        },
                        new
                        {
                            Id = 12,
                            FK_AbilityScore = 6,
                            Name = "Performance"
                        },
                        new
                        {
                            Id = 13,
                            FK_AbilityScore = 6,
                            Name = "Persuasion"
                        },
                        new
                        {
                            Id = 14,
                            FK_AbilityScore = 5,
                            Name = "Religion"
                        },
                        new
                        {
                            Id = 15,
                            FK_AbilityScore = 2,
                            Name = "Sleight of Hand"
                        },
                        new
                        {
                            Id = 16,
                            FK_AbilityScore = 2,
                            Name = "Stealth"
                        },
                        new
                        {
                            Id = 17,
                            FK_AbilityScore = 4,
                            Name = "Survival"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.Character", b =>
                {
                    b.HasOne("DnDCharacterTracker.Models.Race", "Race")
                        .WithMany()
                        .HasForeignKey("FK_Race")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.CharacterAbilities", b =>
                {
                    b.HasOne("DnDCharacterTracker.Models.AbilityScore", "AbilityScore")
                        .WithMany()
                        .HasForeignKey("FK_AbilityScore")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DnDCharacterTracker.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("FK_Character")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.CharacterClass", b =>
                {
                    b.HasOne("DnDCharacterTracker.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("FK_Character")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DnDCharacterTracker.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("FK_Class")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.CharacterProficiency", b =>
                {
                    b.HasOne("DnDCharacterTracker.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("FK_Character")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DnDCharacterTracker.Models.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("FK_Proficiency")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.CharacterRaceFeature", b =>
                {
                    b.HasOne("DnDCharacterTracker.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("FK_Character")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DnDCharacterTracker.Models.RaceFeature", "RaceFeature")
                        .WithMany()
                        .HasForeignKey("FK_RaceFeature")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.CharacterSkill", b =>
                {
                    b.HasOne("DnDCharacterTracker.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("FK_Character")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DnDCharacterTracker.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("FK_Skill")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.Class", b =>
                {
                    b.HasOne("DnDCharacterTracker.Models.Character")
                        .WithMany("Classes")
                        .HasForeignKey("CharacterId");
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.ClassAbilities", b =>
                {
                    b.HasOne("DnDCharacterTracker.Models.AbilityScore", "AbilityScore")
                        .WithMany()
                        .HasForeignKey("FK_AbilityScore")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DnDCharacterTracker.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("FK_Class")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.ClassFeature", b =>
                {
                    b.HasOne("DnDCharacterTracker.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("FK_Class")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DnDCharacterTracker.Models.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FK_Feature")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.FeatureChoice", b =>
                {
                    b.HasOne("DnDCharacterTracker.Models.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FK_Feature")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DnDCharacterTracker.Models.Option", "Option")
                        .WithMany()
                        .HasForeignKey("FK_Option")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.Option", b =>
                {
                    b.HasOne("DnDCharacterTracker.Models.Choice", "Choice")
                        .WithMany("AvailableOptions")
                        .HasForeignKey("FK_Choice")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.RaceAbilityScores", b =>
                {
                    b.HasOne("DnDCharacterTracker.Models.AbilityScore", "AbilityScore")
                        .WithMany()
                        .HasForeignKey("FK_AbilityScore")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DnDCharacterTracker.Models.Race", "Race")
                        .WithMany()
                        .HasForeignKey("FK_Race")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.RaceFeatureChoice", b =>
                {
                    b.HasOne("DnDCharacterTracker.Models.Proficiency", "Choice")
                        .WithMany()
                        .HasForeignKey("FK_Choice")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DnDCharacterTracker.Models.RaceFeature", "RaceFeature")
                        .WithMany()
                        .HasForeignKey("FK_RaceFeature")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.RaceRacefeature", b =>
                {
                    b.HasOne("DnDCharacterTracker.Models.Race", "Race")
                        .WithMany()
                        .HasForeignKey("FK_Race")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DnDCharacterTracker.Models.RaceFeature", "RaceFeature")
                        .WithMany()
                        .HasForeignKey("FK_RaceFeature")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.Skill", b =>
                {
                    b.HasOne("DnDCharacterTracker.Models.AbilityScore", "AbilityScore")
                        .WithMany()
                        .HasForeignKey("FK_AbilityScore")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
