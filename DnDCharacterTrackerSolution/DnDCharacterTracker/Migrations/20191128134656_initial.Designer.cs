// <auto-generated />
using System;
using DnDCharacterTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DnDCharacterTracker.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191128134656_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DnDCharacterTracker.Models.AbilityScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Name");

                    b.HasKey("Id");

                    b.ToTable("AbilityScores");
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Charisma");

                    b.Property<int>("Constitution");

                    b.Property<int>("Dexterity");

                    b.Property<int>("FK_Race");

                    b.Property<int>("Intelligence");

                    b.Property<string>("Name");

                    b.Property<int>("Strenght");

                    b.Property<int>("Wisdom");

                    b.HasKey("Id");

                    b.HasIndex("FK_Race");

                    b.ToTable("Character");
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.CharacterAbilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_AbilityScore");

                    b.Property<int>("FK_Character");

                    b.HasKey("Id");

                    b.HasIndex("FK_AbilityScore");

                    b.HasIndex("FK_Character");

                    b.ToTable("CharacterAbilities");
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.CharacterClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_Character");

                    b.Property<int>("FK_Class");

                    b.Property<int>("Level");

                    b.HasKey("Id");

                    b.HasIndex("FK_Character");

                    b.HasIndex("FK_Class");

                    b.ToTable("CharacterClasses");
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.CharacterSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_Character");

                    b.Property<int>("FK_Skill");

                    b.HasKey("Id");

                    b.HasIndex("FK_Character");

                    b.HasIndex("FK_Skill");

                    b.ToTable("CharacterSkills");
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CharacterId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.ClassAbilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_AbilityScore");

                    b.Property<int>("FK_Class");

                    b.HasKey("Id");

                    b.HasIndex("FK_AbilityScore");

                    b.HasIndex("FK_Class");

                    b.ToTable("ClassAbilities");
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_AbilityScore");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("FK_AbilityScore");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.Character", b =>
                {
                    b.HasOne("DnDCharacterTracker.Models.Race", "Race")
                        .WithMany()
                        .HasForeignKey("FK_Race")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.CharacterAbilities", b =>
                {
                    b.HasOne("DnDCharacterTracker.Models.AbilityScore", "AbilityScore")
                        .WithMany()
                        .HasForeignKey("FK_AbilityScore")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DnDCharacterTracker.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("FK_Character")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.CharacterClass", b =>
                {
                    b.HasOne("DnDCharacterTracker.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("FK_Character")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DnDCharacterTracker.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("FK_Class")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.CharacterSkill", b =>
                {
                    b.HasOne("DnDCharacterTracker.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("FK_Character")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DnDCharacterTracker.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("FK_Skill")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.Class", b =>
                {
                    b.HasOne("DnDCharacterTracker.Models.Character")
                        .WithMany("Classes")
                        .HasForeignKey("CharacterId");
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.ClassAbilities", b =>
                {
                    b.HasOne("DnDCharacterTracker.Models.AbilityScore", "AbilityScore")
                        .WithMany()
                        .HasForeignKey("FK_AbilityScore")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DnDCharacterTracker.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("FK_Class")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DnDCharacterTracker.Models.Skill", b =>
                {
                    b.HasOne("DnDCharacterTracker.Models.AbilityScore", "AbilityScore")
                        .WithMany()
                        .HasForeignKey("FK_AbilityScore")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
